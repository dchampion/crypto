- Elliptic Curve (EC) encryption: is it possible?

    - Encrypt "directly", as is possible RSA? Indirectly it is possible, using a hybrid scheme; e.g. DH key agreement via EC (ECDH), and encryption with the symmetric key that is agreed on (e.g. AES).
    
    - Direct encryption with EC using ElGamal scheme (see answer #2 at https://crypto.stackexchange.com/questions/45040/can-elliptic-curve-cryptography-encrypt-with-public-key-and-decrypt-with-private).
    
    - Indeed you can encrypt "directly" with EC using a variant of ElGamal encryption, which itself is variant (or specialized version) of DH. This scheme relies on the generation of a per-message ephemeral key based on the public parameters of the DH setup; i.e. the generator, the modulus and the public key (see lecture notes on ElGamal encryption).
    
    - If you can encrypt/decrypt with EC, then by definition you can sign/verify with EC.
    
- Why does bitcoin use ECDSA, instead of plain old hashing, to secrute transaction outputs?

    - Because using a hash-only scheme would require revealing the secret, whereas private-key signature does not (see answer #1 at https://bitcoin.stackexchange.com/questions/100691/why-does-bitcoin-use-ecdsa-instead-of-plain-old-hashing-to-secure-transaction)
    
- Bitcoin mining, proof of work and block validation.

    - While mining current candidate block, collect validated transactions into mempool. The mempool is effectively a "buffer" that, if traffic on the network is sufficiently large, will be more than big enough to fill a new candidate block when either (a) the current candidate block is successfully mined and propagated, or much more likely, (b) a valid, mined block is received from the network.
    
    - Block validation consists of (a) block header validation, which includes, critically, that a SHA256 hash of the block header is less than the difficulty target and (b) validation of every transaction contained in the block.
    
    - When either (a) or (b) from step 1 occurs, add the new block to chain and immediately start mining a new block.
    
    - Subtract transactions in newly mined block from mempool, state-transition mempool to new candidate block (up to max block size) and start mining.
    
    - Current block will have a block header consisting of software/protocol version, previous block hash, merkle root of current block (note that the number and order of transactions in the block can, and likely will, differ from one miner to the next), timestamp (will also almost certainly differ), PoW target difficulty, and nonce initialized to zero (0).
    
    - SHA256-hash the block header repeatedly, incrementing the nonce on each iteration, until a value less than the difficulty target is found, or a new valid block is received from another node on network (again, likely the latter). If a value less than the target difficulty is found before a new, valid block is received, propagate the block to the network with the nonce field containing the value that produced the good hash (this becomes the hash of the candidate block, which becomes the previous block hash of the next mined block, and so on). If the block gets added to the chain, collect the coinbase transaction.

- ECDSA

    - Is based on ElGamal digital signature algorithm. See following resources:
        - https://cryptobook.nakov.com/digital-signatures/ecdsa-sign-verify-messages
        - https://en.wikipedia.org/wiki/ElGamal_signature_scheme
        - https://www.instructables.com/Understanding-how-ECDSA-protects-your-data/
        - Cryptography.xlsx spreadsheet.
        
    - How can extracting k from G * k = K be so difficult if it takes only milliseconds to compute K for the key generator?
        - The key generator can use the double-and-add algorithm to compute K. If the key generator selects the value of k, it can know its bit pattern to perform double-and-add. The attacker does not have this luxury, so must add every point until he reaches K, which is intractably hard.
        - Also, since modular arithmetic is used, the distribution of points on the curve is non-monotonic, so binary search is not possible.
        
    - Is the security of ECDSA vulnerable to quantum computers?
        - SHA256 "may" be quantum resistant.
        - If SHA256 is quantum resistant, then your bitcoin is safe as long as it is assigned to an address (remember an address is a double-hash of ripemd160 on top of sha256) that hasn't been reused. Reused in this sense means bitcoin has been spent from the address. In such a case, the public key will have been revealed in the blockchain in the unlocking script to unlock the bitcoin.
        - Given the above, if ECDSA is not quantum resistant, which appears to be the case, then a reused address easy derive a private key from.
        - In order for bitcoin to be truly quantum resistant, the ECDSA will have to be replaced in the core code with a quantum resistant alternative.
        
- K-anonymity as signature proof?

    - What are the use cases for digital signature?
        - Traditional:
            - Message integrity
            - Authentication of origin (or at least that the signer possesses the private key).
            - Non-repudiation of origin (or at least that the signer possesses the private key).
        - Novel:
            - Proof of possession of the private key, which is useful in cryptocurrency because you can prove that you know a secret without revealing it. This can be thought of as the inverse of non-repudiation.
            
    - Is there a use case for proving (or otherwise just knowing) that someone else knows your secret, without revealing the secret?
        - Traditional:
            - To see if your secret appeared in a breach
        - Novel:
            - ???
            
- Bitcoin econonmics (https://seekingalpha.com/article/4169186-in-depth-look-economics-of-bitcoin)

    - Supply is almost completely inelastic. That is, since the total quantity will never exceed 21m, no matter how high the price rises, more coins cannot be produced to meet the demand. What little elasticity there is comes from holders of bitcoin being willing to sell it, thereby resulting in a short-term increase in supply.
    
    - This inelasticity, as reflected in a vertical line on a supply/demand graph, results in big changes in price relative to small changes in demand (i.e. shifts left or right of the downward-sloping demand curve). This is why, at least in part, bitcoin price is so volatile.
    
    - These facts make bitcoin an unlikely candidate to be used as a medium of exchange. Does this fact affect the viability of BCh as a medium of exchange? Some would argue that only a deflationary asset can function effectively as a medium of exchange. Free of fear of inflation, people are more likely to hoard a deflationary asset like bitcoin.
    
- Cryptocurrency address reuse

    - Discouraged even if you don't spend from the address (see https://en.bitcoin.it/wiki/Address_reuse and https://bitcoin.stackexchange.com/questions/20621/is-it-safe-to-reuse-a-bitcoin-address).
    
- Fermat's little theorem

    - a^(p-1) = 1 mod p for all a that are coprime to p, where p is prime.

    - Among other things, this theorem is useful for probing for large primes. For example, select a random large integer n and several integers a where 0 < a < n-1. If a^(n-1) = 1 mod n for all a, then n "may be" prime. See Miller-Rabin algorithm for finding large, probable primes.
    
- Euler's totient function

    - phi(n) returns the number of positive integers from 1 to n that are coprime with n, where n is a positive integer.
    
    - Given the above definition, then phi(p) = p-1 if p is prime. And phi(n) = (p-1)(q-1) if n is composite (semiprime in fact), and p and q are its only factors.
    
- Euler's theorem

    - For every positive integer n, and every a that is coprime to n, then a^phi(n) = 1 mod n. Note that when n is prime, phi(n) = (n-1). In this case, Euler's theorem reduces to Fermat's little theorem.
    
    - https://youtu.be/EcAT1XmHouk
    - https://youtu.be/FHkS3ydTM3M
    - https://youtu.be/t5lACDDoQTk    
    
- RSA Digital Signature Verification

    - RSA paper is wrong. You cannot "prove" a signature S was produced by Db(M), because Eb(S) will produce a valid M for any S. For proof, the signer must send the message M, a hash of the message h(M), and a signature of the hash Db(h(M)).
    
    - The verifier then hashes M, using the same hash procedure as the signer, decrypts the signed hash with Eb(h(M)), and compares the hashes. If the hashes agree, then the message is valid.
    
    - See (https://crypto.stackexchange.com/questions/88000/how-does-recovering-a-message-from-a-signature-as-described-by-rsa-prove-that)
